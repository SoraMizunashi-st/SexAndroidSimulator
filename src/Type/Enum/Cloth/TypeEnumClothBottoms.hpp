// -------------------------------------------------------------------------------------------------------------------------------------//
//   _______  _______  _______  ___      ___      _______    ___      _______  _______                                                  //
//  |       ||       ||       ||   |    |   |    |   _   |  |   |    |   _   ||  _    |      SAS For C++                                //
//  |  _____||_     _||    ___||   |    |   |    |  |_|  |  |   |    |  |_|  || |_|   |      Version  : 1.0.0                           //
//  | |_____   |   |  |   |___ |   |    |   |    |       |  |   |    |       ||       |      Author   : usagi0419                       //
//  |_____  |  |   |  |    ___||   |___ |   |___ |       |  |   |___ |       ||  _    | ___                                             //
//   _____| |  |   |  |   |___ |       ||       ||   _   |  |       ||   _   || |_|   ||   | SPDX-FileCopyrightText : 2025~ StellaLab.  //
//  |_______|  |___|  |_______||_______||_______||__| |__|  |_______||__| |__||_______||___| SPDX-License-Identifier: MIT               //
// -------------------------------------------------------------------------------------------------------------------------------------//
//  I am from a country where English is not my native language
//  The following explanation may contain inaccuracies. Please be aware of this.
// -------------------------------------------------------------------------------------------------------------------------------------//
// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ Individual  Discription ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ //
// -------------------------------------------------------------------------------------------------------------------------------------//
//
// -------------------------------------------------------------------------------------------------------------------------------------//
// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ Common  Description ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ //
// -------------------------------------------------------------------------------------------------------------------------------------//
// This project is Stella Emotional Network Action Models: SENaM.
// SENaM is a small-scale network model that predicts and outputs changes in emotions, parameters, and actions from input strings.
// Please refer to the reference for basic operation.
// URL: https://xxxxx/SENaM/Reference.html
// For individual inquiries, please contact Mizunashi Sora. (StellaLab.)
// Email : shuiwukong6@gmail.com
// -------------------------------------------------------------------------------------------------------------------------------------//
// SENaM Project Coding Style and Naming Conventions
// This document outlines the standardized coding style and naming conventions for the SENaM C++ project.
// Consistent adherence to these rules ensures high readability, consistency, and maintainability across the codebase.
// -------------------------------------------------------------------------------------------------------------------------------------//
// I. Naming Conventions
// ・Classes, Structs, Enums, and Type Definitions: Use PascalCase (all words start with an uppercase letter).
// ・Member Variables: Prefix with a lowercase m (for member) and use PascalCase for the rest of the name.
// ・Static Variables: Prefix with a lowercase s (for static) and use PascalCase.
// ・Constant Variables: Prefix with a lowercase c (for Constant) and use PascalCase.
// ・Function/Method Arguments: Prefix with a lowercase p and use PascalCase for the rest of the name.
// ・Temporary/Local Variables: Prefix with a lowercase t (for temporary) and use PascalCase.
// ・Public Methods: Use PascalCase with no special prefix.
// -------------------------------------------------------------------------------------------------------------------------------------//
// II. Code Structure and Style
// Namespace Usage: All standard library entities must be referenced using their fully qualified names.
// Rule: Always use the std:: prefix.
// Class Definition Order: 
// The visibility sections within a class or struct must be defined in the following order to prioritize the user-facing interface:
// [1]public
// [2]private
// [3]protected (if applicable, typically placed last)
// General Principle: Prefer enum class for defining sets of named constants over macro definitions (#define) to ensure strong type safety.
// -------------------------------------------------------------------------------------------------------------------------------------//
// ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ License summary ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ //
// -------------------------------------------------------------------------------------------------------------------------------------//
// SPDX-FileCopyrightText : 2025~ StellaLab.
// SPDX-License-Identifier: MIT
// -------------------------------------------------------------------------------------------------------------------------------------//
// Please read below for specific information about spdx licenses.
// https://spdx.dev/learn/handling-license-info/
// -------------------------------------------------------------------------------------------------------------------------------------//
// Include Guarde
// -------------------------------------------------------------------------------------------------------------------------------------//
#ifndef TYPE_ENUM_CLOTH_BOTTOMS_HPP
#define TYPE_ENUM_CLOTH_BOTTOMS_HPP
// -------------------------------------------------------------------------------------------------------------------------------------//
#ifndef __SAS_BUILD__
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//
#endif
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//
// Types Object Header
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//
// Utility Object  Header
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//


// -------------------------------------------------------------------------------------------------------------------------------------//
// Custom Object Header
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//


// -------------------------------------------------------------------------------------------------------------------------------------//
// External Library Header
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//
// Standard Library Header
// -------------------------------------------------------------------------------------------------------------------------------------//
#include <cstdint> // use <uint8_t>

// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//
// Starting NameSpace { SAS : SexAndroidSimulator }
// -------------------------------------------------------------------------------------------------------------------------------------//
namespace SAS
{

enum class E_CL_BOTTOMS : uint8_t
{
    NAKED                 = 0 ,


    LIST_SIZE ,
    NONE_ID ,
};


}
// -------------------------------------------------------------------------------------------------------------------------------------//
// Ending NameSpace { SAS : SexAndroidSimulator }
// -------------------------------------------------------------------------------------------------------------------------------------//

// -------------------------------------------------------------------------------------------------------------------------------------//
// Include Guarde
// -------------------------------------------------------------------------------------------------------------------------------------//
#endif
// -------------------------------------------------------------------------------------------------------------------------------------//